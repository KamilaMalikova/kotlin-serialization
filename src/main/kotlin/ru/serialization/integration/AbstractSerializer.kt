package ru.serialization.integration

import com.hazelcast.core.HazelcastInstance
import com.hazelcast.core.HazelcastInstanceAware
import com.hazelcast.nio.ObjectDataInput
import com.hazelcast.nio.ObjectDataOutput
import com.hazelcast.nio.serialization.StreamSerializer
import java.io.InputStream
import java.io.OutputStream

abstract class AbstractSerializer<T>(
    private val strategy: Strategy<T>
): StreamSerializer<T>, HazelcastInstanceAware {
    private lateinit var hazelcastInstance: HazelcastInstance
    private var autoGeneratedTypeId: Int = 0

    override fun write(out: ObjectDataOutput, serializableValue: T) {
        strategy.write(out as OutputStream, serializableValue)
    }

    override fun read(input: ObjectDataInput): T =
        strategy.read(input as InputStream)

    override fun getTypeId(): Int =
        autoGeneratedTypeId

    override fun destroy() {
        strategy.destroy(hazelcastInstance)
    }

    override fun setHazelcastInstance(hazelcastInstance: HazelcastInstance) {
        strategy.setHazelcastInstance(hazelcastInstance)
        this.hazelcastInstance = hazelcastInstance
        this.autoGeneratedTypeId = strategy.newTypeId()
    }
}